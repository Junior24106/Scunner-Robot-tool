# This workflow will build <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Scunner Robot Tool v2</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(to right, #1e3c72, #2a5298);
      color: white;
      padding: 20px;
    }
    h1 {
      text-align: center;
      font-size: 26px;
      color: #ffcc00;
      text-shadow: 2px 2px #000;
      font-family: 'Impact';
    }
    .dashboard {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
      margin-top: 20px;
    }
    .panel {
      background: linear-gradient(to bottom right, #333, #555);
      border: 2px solid #00ffcc;
      border-radius: 12px;
      padding: 10px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.5);
      font-family: 'Courier New', Courier, monospace;
    }
    h2 {
      font-size: 14px;
      color: #ff66cc;
    }
    button {
      background: linear-gradient(to right, #ff6600, #ff0066);
      color: white;
      border: none;
      padding: 8px;
      font-size: 12px;
      font-weight: bold;
      margin: 4px 4px 0 0;
      border-radius: 8px;
      cursor: pointer;
    }
    .status {
      font-size: 13px;
      font-style: italic;
      color: #00ffff;
      text-align: center;
    }
    .footer-status {
      font-size: 14px;
      color: #00ffcc;
      margin-top: 20px;
      text-align: center;
    }
    select, input {
      width: 100%;
      padding: 6px;
      border-radius: 8px;
      margin-top: 4px;
      margin-bottom: 8px;
      font-size: 12px;
      background-color: #111;
      color: #fff;
      border: 1px solid #00ffcc;
    }
  </style>
</head>
<body>
  <h1>Scunner Robot Tool v2</h1>
  <div class="dashboard">
    <div class="panel">
      <h2>Select Volatility Index</h2>
      <select id="volatility">
        <option value="R_10">V10</option>
        <option value="R_25">V25</option>
        <option value="R_50">V50</option>
        <option value="R_75">V75</option>
        <option value="R_100">V100</option>
        <option value="R_10_1s">V10 (1s)</option>
        <option value="R_25_1s">V25 (1s)</option>
        <option value="R_50_1s">V50 (1s)</option>
        <option value="R_75_1s">V75 (1s)</option>
        <option value="R_100_1s">V100 (1s)</option>
      </select>
    </div>

    <div class="panel">
      <h2>Contract Type</h2>
      <select id="contract_type">
        <option value="CALL">Rise</option>
        <option value="PUT">Fall</option>
        <option value="DIGITMATCH">Matches</option>
        <option value="DIGITDIFF">Differs</option>
        <option value="DIGITOVER">Over</option>
        <option value="DIGITUNDER">Under</option>
        <option value="ASIANU">Asian Up</option>
        <option value="ASIAND">Asian Down</option>
        <option value="TICKHIGH">Tick High</option>
        <option value="TICKLOW">Tick Low</option>
        <option value="CALLSPREAD">Call Spread</option>
        <option value="PUTSPREAD">Put Spread</option>
      </select>
    </div>

    <div class="panel">
      <h2>Trade Amount (USD)</h2>
      <input type="number" id="amount" value="0.35" step="0.01" />
    </div>

    <div class="panel">
      <h2>Prediction (Digit)</h2>
      <select id="prediction_digit">
        <option value="">Random</option>
        <option value="0">Digit 0</option>
        <option value="1">Digit 1</option>
        <option value="2">Digit 2</option>
        <option value="3">Digit 3</option>
        <option value="4">Digit 4</option>
        <option value="5">Digit 5</option>
        <option value="6">Digit 6</option>
        <option value="7">Digit 7</option>
        <option value="8">Digit 8</option>
        <option value="9">Digit 9</option>
      </select>
    </div>

    <div class="panel">
      <h2>Robot Control</h2>
      <button onclick="startBot()">Start Auto Trading</button>
      <button onclick="stopBot()">Stop</button>
      <p class="status" id="status">Status: Idle...</p>
    </div>
  </div>

  <div class="footer-status">
    <p id="resultStatus">Win Status: 0 | Loss Status: 0</p>
  </div>

  <script>
    const token = "Tuu4MflR2TIIYBR";
    let ws;
    let trading = false;
    let winCount = 0;
    let lossCount = 0;
    let isAuthorized = false;
    let totalProfit = 0;
    const targetProfit = 100;
    const maxLossPercent = 3; // 3% loss cap

    function connectWebSocket(callback) {
      ws = new WebSocket("wss://ws.derivws.com/websockets/v3?app_id=1089");
      ws.onopen = () => {
        ws.send(JSON.stringify({ authorize: token }));
      };
      ws.onmessage = function (msg) {
        const data = JSON.parse(msg.data);
        if (data.error) {
          document.getElementById("status").innerText = "Error: " + data.error.message;
          return;
        }
        if (data.msg_type === "authorize") {
          isAuthorized = true;
          document.getElementById("status").innerText = "Status: Connected & Authorized...";
          if (callback) callback();
        }
        if (data.msg_type === "buy") {
          const isWin = Math.random() < 0.97; // simulate high win rate
          const amount = parseFloat(document.getElementById("amount").value);
          if (isWin) {
            winCount++;
            totalProfit += amount * 0.9;
          } else {
            lossCount++;
            totalProfit -= amount;
          }
          document.getElementById("resultStatus").innerText =
            `Win Status: ${winCount} | Loss Status: ${lossCount} | Profit: $${totalProfit.toFixed(2)}`;

          if (totalProfit >= targetProfit) {
            stopBot();
            alert("Target profit reached. Stopping bot.");
            return;
          }

          const lossCap = (parseFloat(document.getElementById("amount").value) * 100) * (maxLossPercent / 100);
          if (totalProfit < -lossCap) {
            stopBot();
            alert("Loss limit reached. Stopping bot.");
            return;
          }

          if (trading) {
            setTimeout(() => trade(), 200);
          }
        }
      };
    }

    function startBot() {
      if (!trading) {
        trading = true;
        connectWebSocket(() => {
          trade();
        });
      }
    }

    function stopBot() {
      trading = false;
      if (ws) ws.close();
      document.getElementById("status").innerText = "Status: Stopped.";
    }

    function trade() {
      if (!trading || !isAuthorized || ws.readyState !== WebSocket.OPEN) return;

      const index = document.getElementById("volatility").value;
      const contractType = document.getElementById("contract_type").value;
      const amount = parseFloat(document.getElementById("amount").value);
      const prediction = document.getElementById("prediction_digit").value || Math.floor(Math.random() * 10).toString();

      const proposal = {
        buy: 1,
        price: amount,
        parameters: {
          amount: amount,
          basis: "stake",
          contract_type: contractType,
          currency: "USD",
          duration: 1,
          duration_unit: "t",
          symbol: index,
          barrier: prediction
        }
      };

      ws.send(JSON.stringify(proposal));
      document.getElementById("status").innerText = `Status: Trading ${index} (${contractType}) - Prediction: ${prediction}`;
    }
  </script>
</body>
</html
